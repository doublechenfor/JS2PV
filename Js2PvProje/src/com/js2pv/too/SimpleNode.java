/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.js2pv.too;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

import javax.swing.JOptionPane;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected OutputJS parser;
  
  public void outputpharse(){ 
		SimpleNode proce = (SimpleNode) this.jjtGetChild(0);              		
		SimpleNode processname = (SimpleNode) proce.jjtGetChild(0);
			
		if(processname.value=="function") {	
			SimpleNode processname2 = (SimpleNode) proce.jjtGetChild(2);		
			SimpleNode processname3 = (SimpleNode) proce.jjtGetChild(3);
			processname.jjtSetValue("let");
			processname2.jjtSetValue("=");
			String msg=(String) processname3.value;			
			SimpleNode str0=new SimpleNode(13); 
			processname3.jjtSetValue("\n");
			proce.jjtAddChild1(str0, 1);
			str0.jjtSetValue("process");
			jjtDeleChild(proce, 5);
			jjtDeleChild(proce, 5);	
			jjtDeleChild(proce, 5);			
		SimpleNode name5 = (SimpleNode) proce.jjtGetChild(5);
		SimpleNode str1=new SimpleNode(13); 
		SimpleNode str2=new SimpleNode(13); 
		SimpleNode str3=new SimpleNode(13);
		SimpleNode str4=new SimpleNode(13);
		SimpleNode str5=new SimpleNode(13);
		SimpleNode str6=new SimpleNode(13);
		   proce.jjtAddChild1(str1, 5);
		   proce.jjtAddChild1(str2, 6);
		   proce.jjtAddChild1(str3, 7);
		   proce.jjtAddChild1(str4, 8);
		   proce.jjtAddChild1(str5, 9);
		   proce.jjtAddChild1(str6, 10);
		   name5.jjtSetValue(";");
		   str1.jjtSetValue("out");
		   str2.jjtSetValue("(");
		   str3.jjtSetValue("c");
		   str4.jjtSetValue(",");
		   str5.jjtSetValue(msg);
		   str6.jjtSetValue(")");		 
		}
		else if(processname.value=="var")   //var x; 
		{
			System.out.println("abc");
			processname.jjtSetValue("new");
		}
		else if(processname.value=="if") { //if(x==1) x=5;else x=6;
        	proce.trans_if_then(); 
        	}
		/*}else if(processname.value=="function") {//function k(a,b){}		
			this.trans_function();
		}else if(processname.value=="request") { //request.open("GET","x"); request.send(NULL);
			this.Get_Post();
		}  */  	
		if(proce.jjtGetNumChildren()==1) {  //x=2;
        	processname.let_in();
		} 
		
  }	
  public void trans_block() {
	SimpleNode processname4 = (SimpleNode) this.jjtGetChild(4);
	System.out.println( processname4.jjtGetNumChildren());
  }
public void let_in() {
		SimpleNode str1=new SimpleNode(14);	
		this.jjtAddChild1(str1, 0);
		str1.jjtSetValue("let");
		this.jjtDeleChild(this, 4);
		SimpleNode str2=new SimpleNode(13);
		str2.jjtSetValue("in");
		this.jjtAddChild(str2, this.jjtGetNumChildren());
}
public void trans_if_then() {
	SimpleNode str1=new SimpleNode(16);	
	str1.jjtSetValue("then");
	this.jjtAddChild1(str1, 2);
	//  if(x>=1) x=5;else x=5;
	SimpleNode processname = (SimpleNode) this.jjtGetChild(1);
	SimpleNode processname3 = (SimpleNode) this.jjtGetChild(3);
	SimpleNode processname5 = (SimpleNode) this.jjtGetChild(5);
	SimpleNode str2=new SimpleNode(16);	
	str2.jjtSetValue("let");
	processname3.jjtAddChild1(str2, 0);
	SimpleNode processname4 = (SimpleNode) processname3.jjtGetChild(4);
	processname4.jjtSetValue("in"+"\n");
	SimpleNode str3=new SimpleNode(16);	
	str2.jjtSetValue("let");
	processname3.jjtAddChild1(str2, 0);
	processname5.jjtAddChild1(str2, 0);
	SimpleNode processname44 = (SimpleNode) processname5.jjtGetChild(4);
	processname44.jjtSetValue("in"+"\n");
	//System.out.println(processname5.jjtGetNumChildren());
	//SimpleNode processname5 = (SimpleNode) processname5.jjtGetChild(5);
	SimpleNode processname1 = (SimpleNode) processname.jjtGetChild(1);
	if(processname1.value=="!=") 
		processname1.jjtSetValue("<>");
	else if(processname1.value=="==")
		processname1.jjtSetValue("=");
	}	
public void trans_function() {
	SimpleNode proce = (SimpleNode) this.jjtGetChild(0);              		
	SimpleNode processname = (SimpleNode) proce.jjtGetChild(0);
	SimpleNode processname1 = (SimpleNode) proce.jjtGetChild(2);	
	processname.jjtSetValue("fun");
	int num;
	num=processname1.jjtGetNumChildren();
	proce.jjtDeleChild(proce, 2);
	SimpleNode str1=new SimpleNode(29);
	proce.jjtAddChild(str1, proce.jjtGetNumChildren());
	str1.jjtSetValue("/");	
	SimpleNode str2=new SimpleNode(80);
	proce.jjtAddChild(str2, proce.jjtGetNumChildren());
	System.out.println(proce.jjtGetNumChildren());
	str2.jjtSetValue(num);
	SimpleNode str3=new SimpleNode(51);
	proce.jjtAddChild(str3, proce.jjtGetNumChildren());
	str3.jjtSetValue(".");
}
public void Get_Post() {
	SimpleNode proce = (SimpleNode) this.jjtGetChild(0);              		
	SimpleNode processname = (SimpleNode) proce.jjtGetChild(0);
	SimpleNode processname1 = (SimpleNode) proce.jjtGetChild(1);
	SimpleNode processname2 = (SimpleNode) proce.jjtGetChild(2);
	SimpleNode processname4 = (SimpleNode) proce.jjtGetChild(4);
	SimpleNode processname5 = (SimpleNode) proce.jjtGetChild(6);
	SimpleNode processname6 = (SimpleNode) proce.jjtGetChild(7);
	SimpleNode processname3 = (SimpleNode) processname2.jjtGetChild(0);
	if(processname3.value=="GET") {
	processname.jjtSetValue("in");
	processname1.jjtSetValue("(");
	processname3.jjtSetValue("c");
	processname4.jjtSetValue(")");
	SimpleNode str1=new SimpleNode(51);	
	proce.jjtAddChild1(str1, 3);
	str1.jjtSetValue(",");
	proce.jjtDeleChild(proce, 6);
	proce.jjtDeleChild(proce,6);}
	else {
		processname.jjtSetValue("out");
		processname1.jjtSetValue("(");
		processname3.jjtSetValue("c");
		SimpleNode str1=new SimpleNode(51);	
		proce.jjtAddChild1(str1, 3);
		str1.jjtSetValue(",");
		proce.jjtDeleChild(proce, 4);
		proce.jjtDeleChild(proce, 4);
		proce.jjtDeleChild(proce, 4);
		proce.jjtDeleChild(processname5, 0);
        processname6.jjtSetValue(")");
		SimpleNode str2=new SimpleNode(38);	
		proce.jjtAddChild(str2,proce.jjtGetNumChildren());
		str2.jjtSetValue(";");
	}
}
//request.open("POST","x"); request.send(NULL);
	/*  SimpleNode processname0 = (SimpleNode) processname.jjtGetChild(0);
		SimpleNode processname1 = (SimpleNode) processname.jjtGetChild(1);*/		
	/*	SimpleNode[] processnamearr=new SimpleNode[50];
		int x=0;
		for(x=0;x<processname.jjtGetNumChildren();x++) {			
		processnamearr[x]= (SimpleNode) processname.jjtGetChild(x);
		System.out.println(processnamearr[x].value);
			if(processnamearr[0].value=="if") {					
			if(processnamearr[x].value=="(") {
			jjtDeleChild(processname,x); }			
			else if(processnamearr[x].value==")") {
			jjtDeleChild(processname,x);
			SimpleNode str2=new SimpleNode(16);
			processname.jjtAddChild1(str2, x);	
			System.out.println(str2);
			str2.jjtSetValue("then");	
            }	
				}			
			 if(processnamearr[0].value=="var") {
				System.out.println(processname.jjtGetNumChildren());
			 if(processnamearr[x].value=="var") {
				processnamearr[x].jjtSetValue("let");

				}  		 
			 if(processnamearr[x].value==";") {
				 
				 System.out.println("abc");
				 jjtDeleChild(processname,x);
				 SimpleNode str2=new SimpleNode(13);	
				 proce.jjtAddChild(str2,this.jjtGetNumChildren()-1);
				 str2.jjtSetValue("in");
			 }	
			 	//return ;
			}	
		}*/
	//	SimpleNode str2=new SimpleNode(13);	
	//	proce.jjtAddChild(str2, 3);
	//	SimpleNode procend4 = (SimpleNode) proce.jjtGetChild(3);
	//System.out.println(procend4.value);	
  
  //public void translatevar () {
	//  SimpleNode proce = (SimpleNode) this.jjtGetChild(0);
	  
  //} 
 
public SimpleNode() {
    return;
  }
  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(OutputJS p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    } children[i] = n;
  } 
  @Override
public void jjtAddChild1(Node n, int i) {
  	// TODO Auto-generated method stub
  	if (children == null) {
          children = new Node[i + 1];
  } else if (i >this.jjtGetNumChildren()) {
       Node c[] = new Node[children.length + 1];
       System.arraycopy(children, 0, c, 0, children.length);
        children = c;
   }else if(i<=children.length) {   
	  // System.out.println("qqq");
	int p=0;
  	Node c[] = new Node[children.length + 1]; 
  	for(int k=0;k<children.length;k++) {
  		if(k==i) {c[p]=n;p++;}	
  		c[p]=children[k];  		
  		p++; 		
  		} children = c;  		
  	}
   }
  public void jjtDeleChildtrans(Node[] b) {	  
	 children=b;
  }
 public void jjtDeleChildlast(Node n,int i) {
		 if (i <= n.jjtGetNumChildren()) {	
			 if(i==n.jjtGetNumChildren()-1) {
				 Node c[] = new Node[n.jjtGetNumChildren() - 1];
				 System.arraycopy(children, 0, c, 0, children.length-1);
				 children = c;
			 }
		 }
	}
 public void jjtDeleChild(Node n,int i) {
	 if (i <= n.jjtGetNumChildren()) {	
		 if(i==n.jjtGetNumChildren()-1) {
			 Node c[] = new Node[n.jjtGetNumChildren() - 1];
			 System.arraycopy(children, 0, c, 0, children.length-1);
			 children = c;
		 }
		 else {
	   Node c[] = new Node[n.jjtGetNumChildren() - 1];
	   int p=0;
	   for(int k=0;k<n.jjtGetNumChildren();k++) {			 
		   while(k==i) {
			   k+=1; }	
		   c[p]=n.jjtGetChild(k); p++;    	  
	      } n.jjtDeleChildtrans(c);
	      } 
	 }
}

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /** Accept the visitor. **/
  public Object jjtAccept(OutputJSVisitor visitor, Object data)
{
    return visitor.visit(this, data);	  
  }

  /** Accept the visitor. **/
  public Object childrenAccept(OutputJSVisitor visitor, Object data)
{
    if (children != null) {

      for (int i = 0; i < children.length; ++i) {
    	  
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }
  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */
  
 //public String toString() { return OutputJSTreeConstants.jjtNodeName[id]; }
 /*public void writefile(String str) throws IOException {	 
	 File file=new File("F:\\eclipse\\eclipse\\eclipse-workspace\\again\\src\\output2.txt");
	 FileWriter fw =new FileWriter(file);
	 BufferedWriter bw=new BufferedWriter(fw);
     bw.write(str);
     bw.flush();
     bw.close();
 } */
  
  public String toString() 
  { 
	  return OutputJSConstants.tokenImage[id];
	  }
  
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
   // System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
  
  public void dumpone(String prefix) { 
	  
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dumpone(prefix +" ");
				}
			}
		}
	}
}  
