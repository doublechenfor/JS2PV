/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. OutputJS.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{
                 
   }
PARSER_BEGIN(OutputJS)
package com.js2pv.too;

public class OutputJS extends JFrame/*@bgen(jjtree)*/implements OutputJSTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTOutputJSState jjtree = new JJTOutputJSState();

/*@egen*/
  public OutputJS(){
	Container c=getContentPane();
    c.setLayout(new BorderLayout(5,5));
    JPanel jp1=new JPanel();
    JTextArea jt=new JTextArea(50,50);
    JScrollPane js=new JScrollPane(jt);
    jp1.setLayout(new GridLayout(2,2,5,5));	   
    JButton bt1=new JButton("\u5bfc\u5165\u6587\u4ef6");
    JButton bt2=new JButton("\u751f\u6210PV\u8bed\u8a00");
    JButton bt3=new JButton("\u751f\u6210pv\u8bed\u8a00\u8bed\u6cd5\u6811");
    JButton bt4=new JButton("\u751f\u6210\u6587\u4ef6");
    jp1.add(bt1);
    jp1.add(bt2);
    jp1.add(bt3);
    jp1.add(bt4);	  
    c.add(jp1,BorderLayout.NORTH);
    c.add(js,BorderLayout.CENTER);
	setTitle("borderLayout");
    setSize(400,400);
    setVisible(true);
    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);  
	bt2.addActionListener(new ActionListener() {
		@Override
	    public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			try {
			bt2dostr();
			}catch(IOException e1) {
				e1.printStackTrace();
				}}
	public void bt2dostr() throws IOException {
			jt.setText(" ");
			File file=new File("F:\\eclipse\\eclipse\\eclipse-workspace\\Js2PvProje\\src\\com\\js2pv\\too\\output2.txt");
			try {
				FileReader fr=new FileReader(file);
				BufferedReader bis=new BufferedReader(fr);
				char[] c=new char[50];
				int len;
				while((len=bis.read(c))!=-1) {
					String str=new String(c,0,len);
					jt.setText(str);								
				}				
				fr.close();	
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}		
	});
    bt1.addActionListener(new ActionListener () {
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
	    bt1getstr(); 
	    }			
	public void bt1getstr() {
			// TODO Auto-generated method stub    	
		File file=new File("\\eclipse\\eclipse\\eclipse-workspace\\Js2PvProje\\src\\com\\js2pv\\too\\output1.txt");
			try {
				FileReader fr=new FileReader(file);
				BufferedReader bis=new BufferedReader(fr);
				char[] c=new char[50];
				int len;
				while((len=bis.read(c))!=-1) {
					String str=new String(c,0,len);
					jt.setText(str);						
				}				
				fr.close();	
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		} 
	});	    
  }
public InputStream openfile() {			
	File file=new File("\\eclipse\\eclipse\\eclipse-workspace\\Js2PvProje\\src\\com\\js2pv\\too\\output1.txt");
		try {
			FileReader fr=new FileReader(file);
			BufferedReader bis=new BufferedReader(fr);
			char[] c=new char[50];
			int len;
			while((len=bis.read(c))!=-1) {
				String str=new String(c,0,len);
				InputStream incode=new ByteArrayInputStream(str.getBytes());   
				return incode;						
			}				
			fr.close();	  
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return null;
	} 	 
  
  public static void main(String args[]) {
	  new OutputJS(new OutputJS().openfile());
    try {
      SimpleNode n = OutputJS.Start();           
      StringBuffer s=new StringBuffer("the input is:");
      String str=n.jjtAccept(new OutputVisitor(),s).toString();     
  	 File file=new File("\\eclipse\\eclipse\\eclipse-workspace\\Js2PvProje\\src\\com\\js2pv\\too\\output2.txt");
  	 FileWriter fw =new FileWriter(file);
  	 BufferedWriter bw=new BufferedWriter(fw);
       bw.write(str);
       bw.flush();
       bw.close();
      System.out.println("Thank you.");
   }catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
    }
}
PARSER_END(OutputJS)
SKIP : 
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN :
{
  < BOOLEAN: "boolean" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < FUNCTION: "function" > 
| < PUBLIC: "public" >
| < RETURN: "return" >
| < VAR: "var">
| < IN: "in">
| < LET: "let">
| <IF:"if">
| <THEN:"then">
| <ELSE:"else">
| <OUT:"out">
| <EVENT:"event">
| <FUN:"fun">
| <REDUC:"reduc">
| <New:"new">
| <NULL:"NULL">
}


TOKEN : /* IDENTIFIERS */
{
 <ident:  <LETTER> (<LETTER>|<DIGIT>)* >
 |  < LETTER: ["_","a"-"z","A"-"Z"] >
 |  < DIGIT: ["0"-"9"] >
} 

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < EQU : "=" >
| < SEMICOLON : ";" >
| < LP : "(" >
| < RP : ")" >
| < EQ : "==">
| < NOTEQ : "!=">
| < LT : "< ">
| < SMALLEQ : "<=">
| < NEQ : "<>">
| < OR : "||">
| < AND : "&&">
| < ISTO : "==>">
| < IMPLY : "->">
| < BIGEQ : ">=">
| < POINT:".">
| < YINHAO:"^">
| < COMMA : "," >
| < LB: "[">
| < RB: "]">
| < OBRACE : "{" >  
| < CBARCE : "}" > 
}

SimpleNode Start():{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  process()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void process(): {/*@bgen(jjtree) process */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) process */
   try {
/*@egen*/             
   varsub()newdefine()definemaohao()
  |expstub()
  |definefunction()newdefine()defineLP()newdefine()defineRP()defineOBRACE()funblock()defineCBARCE()
  |defineeif()"("expstub()")"expstub()defineeelse()expstub()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
  //|definefunction()newdefine()"("expnum()")""{" "}"
  //|request()"."defineopen()HTTPrequestopen()"\""(newdefine())?"\""")"definemaohao()request()"."HTTPrequestsend()definemaohao()
}

void exp(): {/*@bgen(jjtree) exp */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) exp */
  try {
/*@egen*/
  expstub()(defineeelor()|defineand())expstub()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
 }

 void funblock(): {/*@bgen(jjtree) funblock */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
 {/*@bgen(jjtree) funblock */
  try {
/*@egen*/
  newobject()usefun()newsend()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
 }

 void newobject(): {/*@bgen(jjtree) newobject */
  SimpleNode jjtn000 = new SimpleNode(JJTNEWOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
 {/*@bgen(jjtree) newobject */
  try {
/*@egen*/
  varsub()newdefine()definedengyu()defineNEW()newdefine()defineLP()defineRP()definemaohao()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
  }
    
  void usefun(): {/*@bgen(jjtree) usefun */
  SimpleNode jjtn000 = new SimpleNode(JJTUSEFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
  {/*@bgen(jjtree) usefun */
  try {
/*@egen*/
  nomeat()yinword()defineCOMMA()yinwordpoint()defineRP()definemaohao()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  }
  void newsend(): {/*@bgen(jjtree) newsend */
  SimpleNode jjtn000 = new SimpleNode(JJTNEWSEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) newsend */
 try {
/*@egen*/

 newdefine()definepoint()newdefine()defineLP()newdefine()defineRP()definemaohao()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
    }

void nomeat(): {/*@bgen(jjtree) nomeat */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMEAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) nomeat */
  try {
/*@egen*/
  newdefine()definepoint()newdefine()defineLP()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
 }
 void yinword(): {/*@bgen(jjtree) yinword */
  SimpleNode jjtn000 = new SimpleNode(JJTYINWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
 {/*@bgen(jjtree) yinword */
 try {
/*@egen*/
 defineyinhao()(newdefine())*defineyinhao()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
   }
void yinwordpoint(): {/*@bgen(jjtree) yinwordpoint */
  SimpleNode jjtn000 = new SimpleNode(JJTYINWORDPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) yinwordpoint */
try {
/*@egen*/
  
defineyinhao()(newdefine())*definepoint()(newdefine())*defineyinhao()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

    } 
void expstub():{/*@bgen(jjtree) expstub */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPSTUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expstub */
 try {
/*@egen*/
 (digitsub()|newdefine())(definedengyu()|definenotequal()|defineequal()|definebigger()|definesmaller())(digitsub()|newdefine())(definemaohao())?/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
} 
String digitsub() :
{/*@bgen(jjtree) digitsub */
  SimpleNode jjtn000 = new SimpleNode(JJTDIGITSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token;
}
{/*@bgen(jjtree) digitsub */
  try {
/*@egen*/
  token = <DIGIT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
    return token.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void varsub() :
{/*@bgen(jjtree) varsub */
  SimpleNode jjtn000 = new SimpleNode(JJTVARSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token;
}
{/*@bgen(jjtree) varsub */
  try {
/*@egen*/
  token = < VAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void newdefine() :
{/*@bgen(jjtree) newdefine */
SimpleNode jjtn000 = new SimpleNode(JJTNEWDEFINE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) newdefine */
  try {
/*@egen*/
  token=<ident>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void newdefinelet() :
{/*@bgen(jjtree) newdefinelet */
SimpleNode jjtn000 = new SimpleNode(JJTNEWDEFINELET);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) newdefinelet */
  try {
/*@egen*/
  token=<LET>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void newdefinein() :
{/*@bgen(jjtree) newdefinein */
SimpleNode jjtn000 = new SimpleNode(JJTNEWDEFINEIN);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) newdefinein */
  try {
/*@egen*/
  token=<IN>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineeif() :
{/*@bgen(jjtree) defineeif */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEEIF);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineeif */
  try {
/*@egen*/
  token=<IF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void definemaohao() :
{/*@bgen(jjtree) definemaohao */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEMAOHAO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) definemaohao */
  try {
/*@egen*/
  token=<SEMICOLON>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineethen() :
{/*@bgen(jjtree) defineethen */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEETHEN);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineethen */
  try {
/*@egen*/
  token=<THEN>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineeelse() :
{/*@bgen(jjtree) defineeelse */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEEELSE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineeelse */
  try {
/*@egen*/
  token=<ELSE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineeelor() :
{/*@bgen(jjtree) defineeelor */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEEELOR);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineeelor */
  try {
/*@egen*/
  token=<OR>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineand() :
{/*@bgen(jjtree) defineand */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEAND);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineand */
  try {
/*@egen*/
  token=<AND>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void definefunction() :
{/*@bgen(jjtree) definefunction */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEFUNCTION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) definefunction */
  try {
/*@egen*/
  token=<FUNCTION>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void definedengyu() :
{/*@bgen(jjtree) definedengyu */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEDENGYU);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) definedengyu */
  try {
/*@egen*/
  token=<EQU>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineequal() :
{/*@bgen(jjtree) defineequal */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEEQUAL);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineequal */
  try {
/*@egen*/
  token=<EQ>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void definenull() :
{/*@bgen(jjtree) definenull */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINENULL);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) definenull */
  try {
/*@egen*/
  token=<NULL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void definenotequal() :
{/*@bgen(jjtree) definenotequal */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINENOTEQUAL);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) definenotequal */
  try {
/*@egen*/
  token=<NOTEQ>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void definebigger() :
{/*@bgen(jjtree) definebigger */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEBIGGER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) definebigger */
  try {
/*@egen*/
  token=<BIGEQ>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void definesmaller() :
{/*@bgen(jjtree) definesmaller */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINESMALLER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) definesmaller */
  try {
/*@egen*/
  token=<SMALLEQ>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineOBRACE() :
{/*@bgen(jjtree) defineOBRACE */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEOBRACE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineOBRACE */
  try {
/*@egen*/
  token=<OBRACE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineCBARCE() :
{/*@bgen(jjtree) defineCBARCE */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINECBARCE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineCBARCE */
  try {
/*@egen*/
  token=<CBARCE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineNEW() :
{/*@bgen(jjtree) defineNEW */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINENEW);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineNEW */
  try {
/*@egen*/
  token=<New>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineyinhao() :
{/*@bgen(jjtree) defineyinhao */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEYINHAO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineyinhao */
  try {
/*@egen*/
  token=<YINHAO>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void definepoint() :
{/*@bgen(jjtree) definepoint */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINEPOINT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) definepoint */
  try {
/*@egen*/
  token=<POINT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineLP() :
{/*@bgen(jjtree) defineLP */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINELP);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineLP */
  try {
/*@egen*/
  token=<LP>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defineRP() :
{/*@bgen(jjtree) defineRP */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINERP);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineRP */
  try {
/*@egen*/
  token=<RP>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
} 
void defineCOMMA() :
{/*@bgen(jjtree) defineCOMMA */
SimpleNode jjtn000 = new SimpleNode(JJTDEFINECOMMA);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) defineCOMMA */
  try {
/*@egen*/
  token=<COMMA>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
